1.
Modules are files present inside a package, 
whereas a class is used to encapsulate data and functions together inside the same unit.
2.
To create instances of a class,
we call the class using class name and pass in whatever arguments its __init__ method accepts.
3.
Class attributes are attributes which are owned by the class itself. 
They will be shared by all the instances of the class. 
Therefore they have the same value for every instance.
It defines class attributes outside all the methods, usually they are placed at the top, right below the class header.
4.
An instance attribute is a Python variable belonging to one, and only one object. 
This variable is only accessible in the scope of this object and it is defined inside the constructor function,
 __init__(self,..) of the class.
5.
self represents the instance of the class. By using the “self” keyword we can access the attributes and methods of the class in python.
6.
Python does not support function overloading. When we define multiple functions with the same name, 
the later one always overrides the prior and thus, in the namespace, there will always be a single entry against each function name.
7.
It provides an intuitive interface to users of  class, plus makes it possible for templates to work equally well with classes and built-in/intrinsic types.
Operator overloading allows C/C++ operators to have user-defined meanings on user-defined types (classes).
8.
A very popular and convenient example is the Addition (+) operator. 
9.
Object-oriented programming has four basic concepts: encapsulation, abstraction, inheritance, and polymorphism.
